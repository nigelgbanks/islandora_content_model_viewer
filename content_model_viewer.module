<?php

/**
 * @file
 *
 * Implements hooks and callbacks for this module.
 */
module_load_include('inc', 'content_model_viewer', 'content_model_viewer.db'); // Helper functions/constants for database.

/**
 * Constants
 */
define("PERM_CONTENT_MODEL_VIEWER_VIEW_OBJECTS", 'View Objects & Datastreams');
define("PERM_CONTENT_MODEL_VIEWER_MODIFY_OBJECT_PROPERTIES", 'Modify Object Properties');
define("PERM_CONTENT_MODEL_VIEWER_PURGE_OBJECTS", 'Purge Objects');
define("PERM_CONTENT_MODEL_VIEWER_ADD_DATASTREAMS", 'Add Datastreams');
define("PERM_CONTENT_MODEL_VIEWER_PURGE_DATASTREAMS", 'Purge Datastreams');
define("PERM_CONTENT_MODEL_VIEWER_DOWNLOAD_DATASTREAMS", 'Download Datastreams');
define("PERM_CONTENT_MODEL_VIEWER_MODIFY_DATASTEAM_PROPERTIES", 'Modify Datastream Properties');

/**
 * Implements Menu Hook. Registers Menus.
 */
function content_model_viewer_menu() {
  $items['viewer/%'] = array(
    'title' => t('Content Model Viewer'),
    'description' => t('Allows users to view Fedora Objects.'),
    'page callback' => 'content_model_viewer',
    'page arguments' => array(1),
    'access arguments' => array(PERM_CONTENT_MODEL_VIEWER_VIEW_OBJECTS),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['viewer/iframe'] = array(
    'page callback' => 'content_model_viewer_iframe',
    'access arguments' => array(PERM_CONTENT_MODEL_VIEWER_VIEW_OBJECTS),
    'type' => MENU_CALLBACK,
  );
  $items['viewer/%/members'] = array(
    'page callback' => 'content_model_viewer_members',
    'page arguments' => array(1),
    'access arguments' => array(PERM_CONTENT_MODEL_VIEWER_VIEW_OBJECTS),
    'type' => MENU_CALLBACK,
  );
  $items['viewer/%/treemembers'] = array(
    'page callback' => 'content_model_viewer_treemembers',
    'page arguments' => array(1),
    'access arguments' => array(PERM_CONTENT_MODEL_VIEWER_VIEW_OBJECTS),
    'type' => MENU_CALLBACK,
  );
  $items['viewer/%/treemember'] = array(
    'page callback' => 'content_model_viewer_treemember',
    'page arguments' => array(1),
    'access arguments' => array(PERM_CONTENT_MODEL_VIEWER_VIEW_OBJECTS),
    'type' => MENU_CALLBACK,
  );
  $items['viewer/%/properties'] = array(
    'page callback' => 'content_model_viewer_properties',
    'page arguments' => array(1),
    'access arguments' => array(PERM_CONTENT_MODEL_VIEWER_MODIFY_OBJECT_PROPERTIES),
    'type' => MENU_CALLBACK,
  );
  $items['viewer/%/datastreams'] = array(
    'page callback' => 'content_model_viewer_datastreams',
    'page arguments' => array(1),
    'access arguments' => array(PERM_CONTENT_MODEL_VIEWER_VIEW_OBJECTS),
    'type' => MENU_CALLBACK,
  );
  $items['viewer/%/datastreams/%'] = array(
    'page callback' => 'content_model_viewer_datastreams',
    'page arguments' => array(1, 3),
    'access arguments' => array(PERM_CONTENT_MODEL_VIEWER_VIEW_OBJECTS),
    'type' => MENU_CALLBACK,
  );
  $items['viewer/%/overview'] = array(
    'page callback' => 'content_model_viewer_overview',
    'page arguments' => array(1),
    'access arguments' => array(PERM_CONTENT_MODEL_VIEWER_VIEW_OBJECTS),
    'type' => MENU_CALLBACK,
  );
  $items['viewer/%/permission_form'] = array(
    'page callback' => 'content_model_viewer_permission_form',
    'page arguments' => array(1),
    'access arguments' => array(PERM_CONTENT_MODEL_VIEWER_MODIFY_DATASTEAM_PROPERTIES),
    'type' => MENU_CALLBACK,
  );
  $items['viewer/%/metadata_form'] = array(
    'page callback' => 'content_model_viewer_metadata_form',
    'page arguments' => array(1),
    'access arguments' => array(PERM_CONTENT_MODEL_VIEWER_MODIFY_DATASTEAM_PROPERTIES),
    'type' => MENU_CALLBACK,
  );
  $items['viewer/metadata_form'] = array(
    'page callback' => 'content_model_viewer_metadata_form',
    'access arguments' => array(PERM_CONTENT_MODEL_VIEWER_MODIFY_DATASTEAM_PROPERTIES),
    'type' => MENU_CALLBACK,
  );
  $items['viewer/%/purge'] = array(
    'page callback' => 'content_model_viewer_purge_object',
    'page arguments' => array(1),
    'access arguments' => array(PERM_CONTENT_MODEL_VIEWER_PURGE_OBJECTS),
    'type' => MENU_CALLBACK,
  );
  $items['viewer/%/add_form/%'] = array(
    'page callback' => 'content_model_viewer_add_object',
    'page arguments' => array(1, 3),
    'access arguments' => array(PERM_CONTENT_MODEL_VIEWER_PURGE_OBJECTS),
    'type' => MENU_CALLBACK,
  );
  $items['viewer/%/collection/remove/%'] = array(
    'page callback' => 'content_model_viewer_remove_from_collection',
    'page arguments' => array(1, 4, 5),
    'access arguments' => array('edit fedora meta data'),
    'type' => MENU_CALLBACK,
  );
  $items['viewer/%/add'] = array(
    'page callback' => 'content_model_viewer_add_datastream',
    'page arguments' => array(1),
    'access arguments' => array(PERM_CONTENT_MODEL_VIEWER_ADD_DATASTREAMS),
    'type' => MENU_CALLBACK,
  );
  $items['viewer/%/%/purge'] = array(
    'page callback' => 'content_model_viewer_purge_datastream',
    'page arguments' => array(1, 2),
    'access arguments' => array(PERM_CONTENT_MODEL_VIEWER_PURGE_DATASTREAMS),
    'type' => MENU_CALLBACK,
  );
  $items['viewer/%/%/download'] = array(
    'page callback' => 'content_model_viewer_download_datastream',
    'page arguments' => array(1, 2),
    'access arguments' => array(PERM_CONTENT_MODEL_VIEWER_DOWNLOAD_DATASTREAMS),
    'type' => MENU_CALLBACK,
  );
  $items['viewer/%/%/view'] = array(
    'page callback' => 'content_model_viewer_view_datastream',
    'page arguments' => array(1, 2),
    'access arguments' => array(PERM_CONTENT_MODEL_VIEWER_VIEW_OBJECTS),
    'type' => MENU_CALLBACK,
  );
  $items['admin/settings/content_model_viewer'] = array(
    'title' => t('Content Model Viewer Settings'),
    'description' => t('Settings for the Content Model Viewer.'),
    'page callback' => 'theme',
    'page arguments' => array('content_model_viewer_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'content_model_viewer.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/settings/content_model_viewer/%/edit'] = array(
    'title' => t('Content Model Viewer Settings'),
    'description' => t('Settings for the Contet Model Viewer.'),
    'file' => 'content_model_viewer.admin.inc',
    'page callback' => 'theme',
    'page arguments' => array('content_model_viewer_custom_settings', 3),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/settings/content_model_viewer/form/autocomplete/models'] = array(
    'page callback' => 'content_model_viewer_autocomplete_models',
    'access arguments' => array('administer site configuration'),
    'file' => 'content_model_viewer.admin.inc',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_menu_alter().
 *
 * @param array $items
 */
function content_model_viewer_menu_alter(&$items) {
  $items['fedora']['page callback'] = 'content_model_viewer';
  $items['fedora/repository']['page callback'] = 'content_model_viewer';
}

/**
 * Implements hook_perm. Register permissions.
 *
 * @return array
 */
function content_model_viewer_perm() {
  return array(
    PERM_CONTENT_MODEL_VIEWER_VIEW_OBJECTS,
    PERM_CONTENT_MODEL_VIEWER_MODIFY_OBJECT_PROPERTIES,
    PERM_CONTENT_MODEL_VIEWER_PURGE_OBJECTS,
    PERM_CONTENT_MODEL_VIEWER_ADD_DATASTREAMS,
    PERM_CONTENT_MODEL_VIEWER_PURGE_DATASTREAMS,
    PERM_CONTENT_MODEL_VIEWER_DOWNLOAD_DATASTREAMS,
    PERM_CONTENT_MODEL_VIEWER_MODIFY_DATASTEAM_PROPERTIES
  );
}

/**
 * Implements Hook Theme. Registers themes.
 *
 * @return array
 */
function content_model_viewer_theme() {
  return array(
    'content_model_viewer' => array(
      'arguments' => array('pid' => NULL),
      'template' => 'ViewerIFrame',
    ),
    'content_model_viewer_iframe' => array(
      'arguments' => array('pid' => NULL),
      'template' => 'IFrame',
    ),
    'content_model_viewer_metadata_form' => array(
      'arguments' => array('wrapper_id' => NULL, 'pid' => NULL, 'action' => NULL),
      'template' => 'Form',
    ),
    'content_model_viewer_settings' => array(
      'template' => 'templates/Settings',
    ),
    'content_model_viewer_custom_settings' => array(
      'arguments' => array('pid' => NULL),
      'template' => 'templates/CustomSettings',
    ),
    'default_content_model_viewer' => array(
      'arguments' => array('pid' => NULL),
      'file' => 'models/Default.inc',
      'template' => 'models/Default',
    ),
    'field_book_content_model_viewer' => array(
      'arguments' => array('pid' => NULL),
      'template' => 'models/Default',
    ),
    'content_model_viewer_form_table' => array(
      'arguments' => array('element' => NULL)
    )
  );
}

/**
 * 'content_model_datastream_viewers' Hook implementation.
 *
 * Lists all the datastream viewers
 */
function content_model_viewer_content_model_datastream_viewers() {
  /**
   * @todo make is so that no Classes need to be created and all the information is included
   * in this array...
   */
  $flexpaper = array(
    'type' => 'inc',
    'module' => 'content_model_viewer',
    'file' => 'viewers/FlexPaper',
    'class' => 'FlexPaperViewer',
  );
  $xml = array(
    'type' => 'inc',
    'module' => 'content_model_viewer',
    'file' => 'viewers/XML',
    'class' => 'XMLDatastreamViewer',
  );
  $image_basic = array(
    'type' => 'inc',
    'module' => 'content_model_viewer',
    'file' => 'viewers/BasicImageViewer',
    'class' => 'BasicImageViewer',
  );
  $image_djatoka = array(// Adore Djatoka is required. Should check the content model for service def or something.
    'type' => 'inc',
    'module' => 'content_model_viewer',
    'file' => 'viewers/Djatoka',
    'class' => 'DjatokaViewer',
  );
  return array(
    'application/x-shockwave-flash' => $flexpaper,
    'application/shockwave-flash' => $flexpaper,
    'text/xml' => $xml,
    'application/rdf+xml' => $xml,
    'image/jpeg' => $image_basic,
    'image/gif' => $image_basic,
    'image/jp2' => $image_basic,
    'image/jpg' => $image_basic,
    'image/png' => $image_basic,
    'image/raw' => $image_basic,
    'image/tiff' => $image_basic,
    'image/tif' => $image_basic,
  );
}

/**
 * Loads all the installed module classes.
 */
function content_model_viewer_include_content_models() {
  $include_path = drupal_get_path('module', 'content_model_viewer') . "/models";
  $dir = opendir($include_path);
  if ($dir !== FALSE) {
    while (($file = readdir($dir)) !== FALSE) {
      if (preg_match('/\.inc$/', $file)) {
        require_once "$include_path/$file";
      }
    }
  }
  closedir($dir);
}

/**
 * Get the list of installed ContentModelViewer classes.
 */
function content_model_viewer_get_models() {
  $models = array();
  $classes = get_declared_classes();
  foreach ($classes as $class) {
    if ($class instanceof ContentModelViewer) {
      $models[] = $class;
    }
  }
  return $models;
}

/**
 * Loads all the installed viewer classes.
 */
function content_model_viewer_include_viewers() {
  $include_path = drupal_get_path('module', 'content_model_viewer') . "/viewers";
  $dir = opendir($include_path);
  if ($dir !== FALSE) {
    while (($file = readdir($dir)) !== FALSE) {
      if (preg_match('/\.inc$/', $file)) {
        require_once "$include_path/$file";
      }
    }
  }
  closedir($dir);
}

/**
 * Hook for register_content_models_for_viewer
 *
 * @return array
 */
function content_model_viewer_register_content_models_for_viewer() {
  $models = array();
  $models['si:fieldbooks'] = array(
    'type' => 'inc',
    'module' => 'content_model_viewer',
    'file' => 'FieldBooks',
    'class' => 'FieldBookModelViewer'
  );
  return $models;
}

/**
 * Gets an instance of a content model viewer.
 *
 * @param string $pid
 *
 * @return object
 *   An instance of the Content Model Viewer if found. Otherwise it returns
 *   the default content model viewer.
 */
function content_model_viewer_get_registered_content_model_viewer($pid) {
  if (($model_pid = content_model_viewer_get_content_model_pid($pid)) != FALSE) {
    $models = module_invoke_all('register_content_models_for_viewer');
    foreach ($models as $key => $model) {
      if ($key == $model_pid) {
        module_load_include($model['type'], $model['module'], $model['file']);
        $class = $model['class'];
        return new $class($pid);
      }
    }
  }
  module_load_include('inc', 'content_model_viewer', 'models/Default');
  // Default Display
  $model = module_invoke_all('register_default_content_model_for_viewer');
  if (!empty($model)) { // If more than one is defined used the last one, ideally this would be exposed via a settings menu and one would be selected.
    $model = array_pop($model); // Last model
    module_load_include($model['type'], $model['module'], $model['file']);
    $class = $model['class'];
    return new $class($pid);
  }
  else {
    return new DefaultModelViewer($pid);
  }
}

/**
 * Get the pid of this objects content model.
 *
 * @param string $pid
 *
 * @return string
 */
function content_model_viewer_get_content_model_pid($pid) {
  module_load_include('inc', 'fedora_repository', 'ContentModel');
  $content_model = ContentModel::loadFromObject($pid);
  return $content_model ? $content_model->pid : FALSE;
}

/**
 * Gets the Supported Viewers.
 *
 * @staticvar array $cache
 * @return array
 */
function content_model_viewer_get_supported_viewers() {
  static $cache;
  if (!isset($cache)) {
    $cache = array();
    foreach (module_implements('content_model_datastream_viewers') as $module) {
      $viewers = module_invoke($module, 'content_model_datastream_viewers');
      if (isset($viewers) && is_array($viewers)) {
        $cache = array_merge_recursive($cache, $viewers);
      }
    }
  }
  return $cache;
}

/**
 * Looks for a supported viewer that can view the given MIME type, and gets the viewer properties.
 *
 * @param string $mime
 *   A valid MIME Type.
 *
 * @return array
 *   The properties of the viewer if found, NULL otherwise. The format of the properties is defined by the
 *   content_model_datastream_viewers hook.
 */
function content_model_viewer_get_viewer_properties($mime) {
  $viewers = content_model_viewer_get_supported_viewers();
  foreach ($viewers as $supported_mime_type => $properties) {
    if ($supported_mime_type == $mime) { // @todo make both lower case.
      return $properties;
    }
  }
  return NULL;
}

function content_model_viewer_grab_js() {
  /**
   * Grab the scripts and run jquery replace code to use the latest jquery js.
   */
  $scripts = drupal_add_js();
  // Replace jquery.js first.
  $new_jquery = array(jquery_update_jquery_path() => $scripts['core']['misc/jquery.js']);
  $scripts['core'] = array_merge($new_jquery, $scripts['core']);
  unset($scripts['core']['misc/jquery.js']);
  // Loop through each of the required replacements.
  foreach (jquery_update_get_replacements() as $type => $replacements) {
    foreach ($replacements as $find => $replace) {
      // If the file to replace is loaded on this page...
      if (isset($scripts[$type][$find])) {
      // Create a new entry for the replacement file, and unset the original one.
        $replace = JQUERY_UPDATE_REPLACE_PATH .'/'. $replace;
        $scripts[$type][$replace] = $scripts[$type][$find];
        unset($scripts[$type][$find]);
      }
    }
  }
  return $scripts;
}

function content_model_viewer_grab_css() {
  $css = drupal_add_css();
  $css_path = drupal_get_path('module', 'content_model_viewer') . '/css';
  $replace = array(
    'system/defaults.css' => $css_path . '/defaults.css',
    'system/system.css' => $css_path . '/system.css',
    'system/system-menus.css' => FALSE,
    'system/user.css' => FALSE
  );
  foreach ($css['all'] as $group => &$styles) {
    foreach ($styles as $style => $bool) {
      if (strpos($style, 'themes/')) { // Ignore the global themes
        unset($styles[$style]);
      }
      $filename = substr($style, strpos($style, 'modules/') + strlen('modules/'));
      if (isset($replace[$filename])) {
        if ($replace[$filename] !== FALSE) {
          $position = array_search($style, array_keys($styles));
          $styles = content_model_viewer_array_insert($styles, array($replace[$filename] => TRUE), $position);
          unset($styles[$style]);
          for ($i = 0; $i <= $position; $i++) {
            next($styles);
          }
        }
        else {
          unset($styles[$style]);
        }
      }
    }
  }
  return $css;
}

function content_model_viewer_array_insert($arr, $insert, $position) {
  foreach ($arr as $key => $value) {
    if ($i == $position) {
      foreach ($insert as $ikey => $ivalue) {
        $ret[$ikey] = $ivalue;
      }
    }
    $ret[$key] = $value;
    $i++;
  }
  return $ret;
}

/**
 * Sets up variables for the template.
 *
 * @param array $variables
 */
function template_preprocess_content_model_viewer_iframe(array &$variables) {
  global $base_url;
  global $user;
  module_load_include('inc', 'fedora_repository', 'api/fedora_item');
  module_load_include('inc', 'content_model_viewer', 'Collection');
  module_load_include('inc', 'fedora_repository', 'CollectionClass');
  $variables['scripts'] = drupal_get_js('header', content_model_viewer_grab_js());
  $variables['styles'] = drupal_get_css(content_model_viewer_grab_css());
  $pid = $variables['pid'];

  if (isset($pid)) {
    $item = new Fedora_Item($pid);
    if ($item->exists()) {
      $variables['label'] = $item->objectProfile->objLabel;
      $variables['is_collection'] = Collection::isCollection($pid) ? 'true' : 'false';
    }
    else {
      $variables['pid'] = $variables['label'] = '';
      $variables['is_collection'] = 'false';
    }
  }
  else {
    $variables['pid'] = $variables['label'] = '';
    $variables['is_collection'] = 'false';
  }
  $user_data = unserialize($user->data);
  $user_pid = $user_data['islandora_user_pid'];

  if (in_array('administrator', $user->roles)) {
    $root = variable_get('fedora_repository_pid', 'islandora:root');
    $pid = $user_pid;
  }
  else {
   $serialized_data = unserialize($user->data);
   $root = $serialized_data['islandora_user_pid'];
  }

  if ($user_pid) {
    $itql_query = 'select $object $title
      count(select $pid from <#ri> where ($object <fedora-model:hasModel> $sub_model
       and $sub_model <fedora-model:hasModel> $sub_parent_model
       and $sub_parent_model <mulgara:is> <info:fedora/islandora:collectionCModel>
       and $object <fedora-model:state> <info:fedora/fedora-system:def/model#Active>
       and $pid <fedora-model:state> <info:fedora/fedora-system:def/model#Active>
       and $pid <fedora-model:hasModel> $child_model
       and ($pid <fedora-rels-ext:isMemberOfCollection> $object or $pid <fedora-rels-ext:isMemberOf> $object))
       minus $child_model <mulgara:is> <info:fedora/fedora-system:FedoraObject-3.0>
      )
      from <#ri> where ($object <info:fedora/fedora-system:def/model#label> $title
       and $object <mulgara:is> <info:fedora/' . $user_pid . '>)';
    $collectionClass = new CollectionClass();
    $query_results = $collectionClass->getRelatedItems(NULL, $itql_query);
    $xml_set = simplexml_load_string($query_results);
    $result = $xml_set->results->result[0];
    $variables['rootowner'] = $result->title;
    $variables['si_user'] = $user_pid;
  }
  else {
    $variables['rootowner'] = $user->name;
  }

  $variables['root'] = $root;
  $variables['base_url'] = $base_url;
  $variables['dsid'] = 'SWF'; // Default viewer.
  $variables['view_function'] = 'loadFlexPlayer';
  $variables['paths'] = array(
    'object' => array(
      'overview' => "viewer/pid/overview",
      'properties' => "viewer/pid/properties",
      'datastreams' => "viewer/pid/datastreams",
      'permission_form' => "viewer/pid/permission_form",
      'metadata_form' => "viewer/pid/metadata_form",
      'remove_relationship' => "viewer/pid/collection/remove/dsid", // Hack the dsid will be a pid actually
      'members' => "viewer/pid/members",
      'treemembers' => "viewer/pid/treemembers",
      'treemember' => "viewer/pid/treemember",
      'purge' => "viewer/pid/purge",
      'add' => "viewer/pid/add_form/dsid"
    ),
    'datastream' => array(
      'add' => "viewer/pid/add",
      'purge' => "viewer/pid/dsid/purge",
      'properties' => "viewer/pid/dsid/properties",
      'download' => "viewer/pid/dsid/download",
      'view' => "viewer/pid/dsid/view"
    )
  );
}

/**
 * Renders the Viewer for a given pid if possible.
 *
 * @param string $pid
 */
function content_model_viewer($pid = NULL) {
  global $user;
  module_load_include('inc', 'fedora_repository', 'api/fedora_utils');
  module_load_include('inc', 'fedora_repository', 'api/fedora_item');
  // Copied from islandora.
  if (!fedora_available()) {
    drupal_set_message(t('The Fedora repository server is currently unavailable. Please contact the site administrator.'), 'warning', FALSE);
    return '';
  }
  if (function_exists('risearch_available') && !risearch_available()) {
    drupal_set_message(t('The Fedora resource index search is currently unavailable. Please contact the site administrator.'), 'warning', FALSE);
    return '';
  }
  if ($pid !== NULL) {
    $item = new fedora_item($pid);
    if (!$item->exists()) {
      $pid = NULL;
    }
  }
  return theme('content_model_viewer', $pid);
  /*
  $path = drupal_get_path('module', 'content_model_viewer');
  $js_path = $path . '/js';
  if (isset($_POST['action'])) { // Render Metadata Form
    $action = $_POST['action'];
    return theme('content_model_viewer_metadata_form', $pid, $action);
  }
  else {
  /* Load ExtJS
    module_load_include('inc', 'extjs', 'extjs.utils');
    extjs_add_js_file('ext-all');
    extjs_add_css_file('ext-all');
    //drupal_add_css($path . '/css/Clear.css');
    //drupal_add_css($path . '/lib/ext/resources/css/ext-all-gray.css', 'theme', 'all');
    /* Load Panels/Widgets /
    drupal_add_js($js_path . '/IncludeFirst.js');
    drupal_add_js($js_path . '/SortButton.js');
    drupal_add_js($js_path . '/DatastreamViewerPanel.js');
    drupal_add_js($js_path . '/FilesPanel.js');
    drupal_add_js($js_path . '/OverviewPanel.js');
    drupal_add_js($js_path . '/ViewerPanel.js');
    $manage_permissions = array(
      PERM_CONTENT_MODEL_VIEWER_MODIFY_OBJECT_PROPERTIES,
      PERM_CONTENT_MODEL_VIEWER_PURGE_OBJECTS,
      PERM_CONTENT_MODEL_VIEWER_ADD_DATASTREAMS,
      PERM_CONTENT_MODEL_VIEWER_PURGE_DATASTREAMS,
      PERM_CONTENT_MODEL_VIEWER_MODIFY_DATASTEAM_PROPERTIES
    );
    $show_manage_panel = false;
    foreach ($manage_permissions as $permission) {
      if (user_access($permission)) {
        $show_manage_panel = true;
      }
    }
    if ($show_manage_panel) {
      drupal_add_js($js_path . '/ObjectPropertiesPanel.js');
      drupal_add_js($js_path . '/DatastreamPropertiesPanel.js');
      drupal_add_js($js_path . '/ManagePanel.js');
    }
    drupal_add_js($js_path . '/CollectionPanel.js');
    drupal_add_js($js_path . '/TreePanel.js');
    drupal_add_js($js_path . '/ContentModelViewer.js');
    drupal_add_css($path . '/css/ContentModelViewer.css');
    /* Load Viewers /
    module_load_include('inc', 'content_model_viewer', 'viewers/AbstractViewer');
    module_load_include('inc', 'content_model_viewer', 'models/AbstractModel');
    AbstractViewer::LoadRequiredResourcesForAllViewers();
    AbstractModel::LoadRequiredResourcesFor($pid);
    return theme('content_model_viewer', $pid);
    }*/
}

function content_model_viewer_iframe($pid = NULL) {
  $path = drupal_get_path('module', 'content_model_viewer');
  $js_path = $path . '/js';
  module_load_include('inc', 'extjs', 'extjs.utils');
  extjs_add_all();
  extjs_add_css_file('ext-all-gray');
  drupal_add_css(drupal_get_path('module', 'sidora') . '/css/smith.css', 'theme'); // God awful hack
  /* Load Panels/Widgets */
  drupal_add_js($js_path . '/json2.js'); // Deal with IE problems
  drupal_add_js($js_path . '/IncludeFirst.js');
  drupal_add_js($js_path . '/SortButton.js');
  drupal_add_js($js_path . '/DatastreamViewerPanel.js');
  drupal_add_js($js_path . '/FilesPanel.js');
  drupal_add_js($js_path . '/OverviewPanel.js');
  drupal_add_js($js_path . '/ViewerPanel.js');
  $manage_permissions = array(
    PERM_CONTENT_MODEL_VIEWER_MODIFY_OBJECT_PROPERTIES,
    PERM_CONTENT_MODEL_VIEWER_PURGE_OBJECTS,
    PERM_CONTENT_MODEL_VIEWER_ADD_DATASTREAMS,
    PERM_CONTENT_MODEL_VIEWER_PURGE_DATASTREAMS,
    PERM_CONTENT_MODEL_VIEWER_MODIFY_DATASTEAM_PROPERTIES
  );
  $show_manage_panel = FALSE;
  foreach ($manage_permissions as $permission) {
    if (user_access($permission)) {
      $show_manage_panel = TRUE;
    }
  }
  if ($show_manage_panel) {
    drupal_add_js($js_path . '/ObjectPropertiesPanel.js');
    drupal_add_js($js_path . '/DatastreamPropertiesPanel.js');
    drupal_add_js($js_path . '/ManagePanel.js');
  }
  drupal_add_js($js_path . '/CollectionPanel.js');
  drupal_add_js($js_path . '/TreePanel.js');
  drupal_add_js($js_path . '/ContentModelViewer.js');
  drupal_add_css($path . '/css/ContentModelViewer.css');
  /* Load Viewers */
  module_load_include('inc', 'content_model_viewer', 'viewers/AbstractViewer');
  module_load_include('inc', 'content_model_viewer', 'models/AbstractModel');
  AbstractViewer::LoadRequiredResourcesForAllViewers();
  AbstractModel::LoadRequiredResourcesFor($pid ? $pid : variable_get('fedora_repository_pid', 'islandora:root'));
  echo theme('content_model_viewer_iframe', $pid);
  exit();
}

/**
 * Returns the HTML for overview panel in the viewer.
 *
 * @param string $pid
 *
 * @return string
 */
function content_model_viewer_overview($pid) {
  $viewer = content_model_viewer_get_registered_content_model_viewer($pid);
  try {
    AbstractModel::LoadRequiredResourcesFor($pid);
    $data = $viewer->render();
    $func = $viewer->getInitializationFunction();
    $javascript = drupal_add_js(NULL, NULL, 'header');
    $settings = $javascript['setting'];
    if (isset($settings)) {
      $settings = call_user_func_array('array_merge_recursive', $javascript['setting']);
      unset($settings['ahah']['']);
    }
    $js = $javascript['module'];
    $query_string = '?'. substr(variable_get('css_js_query_string', '0'), 0, 1);
    $js_files = array();
    foreach ($js as $path => $properties) {
      $js_files[] = base_path() . $path . ($properties['cache'] ? $query_string : '?'. time());
    }
    $css_files = array();
    $css = content_model_viewer_grab_css();
    foreach ($css['all'] as $group) {
      foreach ($group as $path => $bool) {
        $css_files[] = base_path() . $path . $query_string;
      }
    }
    $status = theme_status_messages();
    $data = '<span class="drupal-content">' . $status . $data . '</span>';
    $refresh = NULL;
    if ($_SESSION['content_model_viewer_refresh_tree']) {
      $refresh = $_SESSION['content_model_viewer_refresh_tree']; // Yuck
      unset($_SESSION['content_model_viewer_refresh_tree']);
    }
    echo json_encode(array('success' => TRUE, 'data' => $data, 'func' => $func, 'settings' => $settings, 'js' => $js_files, 'css' => $css_files, 'refresh' => $refresh));
  } catch (Exception $e) {
    drupal_set_message($e->getMessage());
  }
  exit();
}

/**
 * Show the edit permission form.
 */
function content_model_viewer_permission_form($pid) {
  $cmodels = content_model_viewer_get_cmodels($pid);
  $id = in_array('islandora:collectionCModel', $cmodels) ? 'concept-permission-form' : 'resource-permission-form';
  $form = drupal_get_form('islandora_xacml_editor_page', $pid, 'POLICY');
  $status = theme_status_messages();
  $data = "<div id='$id' class='drupal-content'>$status $form</div>";
  $javascript = drupal_add_js(NULL, NULL, 'header');
  $settings = $javascript['setting'];
  if (isset($settings)) {
    $settings = call_user_func_array('array_merge_recursive', $javascript['setting']);
    unset($settings['ahah']['']);
  }
  $js = $javascript['module'];
  $query_string = '?'. substr(variable_get('css_js_query_string', '0'), 0, 1);
  $files = array();
  foreach ($js as $path => $properties) {
    $files[] = base_path() . $path . ($properties['cache'] ? $query_string : '?'. time());
  }
  $css_files = array();
  $css = content_model_viewer_grab_css();
  foreach ($css['all'] as $group) {
    foreach ($group as $path => $bool) {
      $css_files[] = base_path() . $path . $query_string;
    }
  }
  header("Content-type: application/json");
  echo json_encode(array('success' => TRUE, 'data' => $data, 'func' => NULL, 'settings' => $settings, 'js' => $files, 'css' => $css_files));
  exit();
}

function content_model_viewer_get_cmodels($pid) {
  $query = 'select $object $title $model $parent_model
    from <#ri>
    where ($object <info:fedora/fedora-system:def/model#label> $title
    and $object <mulgara:is> <info:fedora/' . $pid . '>
    and $object <fedora-model:hasModel> $model
    and $model <fedora-model:hasModel> $parent_model
    and $object <fedora-model:state> <info:fedora/fedora-system:def/model#Active>)
    minus $model <mulgara:is> <info:fedora/fedora-system:FedoraObject-3.0>
    minus $model <mulgara:is> <info:fedora/fedora-system:ContentModel-3.0>
    minus $parent_model <mulgara:is> <info:fedora/fedora-system:FedoraObject-3.0>
    order by $title';
  module_load_include('inc', 'fedora_repository', 'CollectionClass');
  $collection = new CollectionClass();
  $results = $collection->getRelatedObjects(NULL, 1000000, NULL, $query);
  $ret = array();
  if ($results != '') {
    $document = new DOMDocument();
    $document->loadXML($results);
    $path = new DOMXPath($document);
    $path->registerNamespace('sparql', 'http://www.w3.org/2001/sw/DataAccess/rf1/result');
    $results = $path->query('//sparql:result');
    $count = $results->length;
    if ($count > 0) {
      for ($i = 0; $i < $count; $i++) {
        $result = $results->item($i);
        $parent_model_pid = substr($path->query('sparql:parent_model/@uri', $result)->item(0)->value, 12); // 12 characteres in "info:fedora/"
        $ret[] = $parent_model_pid;
      }
    }
    return $ret;
  }
  return $ret;
}

function content_model_viewer_form_islandora_xacml_editor_page_alter(&$form, &$form_state) {
  $form['pid'] = array(
    '#type' => 'hidden',
    '#value' => $form_state['storage']['object_pid']
  );
  $form['#submit'][] = 'content_model_viewer_form_islandora_xacml_editor_page_submit';
}

function content_model_viewer_form_islandora_xacml_editor_page_submit($form, &$form_state) {
  $pid = $form_state['values']['pid'];
  $form_state['redirect'] = "viewer/{$pid}/overview";
}
/**
 * Show the metadata form.
 */
function content_model_viewer_metadata_form($pid, $action = 'edit') {
  // If concept
  $cmodels = content_model_viewer_get_cmodels($pid);
  $id = in_array('islandora:collectionCModel', $cmodels) ? 'concept-metadata-form' : 'resource-metadata-form';
  $data = theme('content_model_viewer_metadata_form', $id, $pid, 'edit');
  $javascript = drupal_add_js(NULL, NULL, 'header');
  $settings = $javascript['setting'];
  if (isset($settings)) {
    $settings = call_user_func_array('array_merge_recursive', $javascript['setting']);
    unset($settings['ahah']['']);
  }
  $js = $javascript['module'];
  $query_string = '?'. substr(variable_get('css_js_query_string', '0'), 0, 1);
  $files = array();
  foreach ($js as $path => $properties) {
    $files[] = base_path() . $path . ($properties['cache'] ? $query_string : '?'. time());
  }
  $css_files = array();
  $css = content_model_viewer_grab_css();
  foreach ($css['all'] as $group) {
    foreach ($group as $path => $bool) {
      $css_files[] = base_path() . $path . $query_string;
    }
  }
  header("Content-type: application/json");
  echo json_encode(array('success' => TRUE, 'data' => $data, 'func' => NULL, 'settings' => $settings, 'js' => $files, 'css' => $css_files, 'refresh' => $refresh));
  exit();
}

/**
 * Gets the members of this collection.
 *
 * @param string $pid
 */
function content_model_viewer_members($pid) {
  module_load_include('inc', 'content_model_viewer', 'Collection');
  $collection = new Collection($pid);
  list($data, $total) = $collection->getMembers();
  echo json_encode(array('success' => TRUE, 'data' => $data, 'total' => $total));
  exit();
  /**
   * Expected Data:
   *
   * 'link' => $base_url . '/viewer/' . 'coccc:1675',
   * 'label' => 'Some Colorado College Object',
   * 'description' => 'The Colorado College Nugget, formerly the Pikes Peak Nugget from 1900-1941, was issued until 2006-2007. The 1969-1970 Nugget was issued as loose photosheets contained in a box and named the The Colorado College Nugget, formerly the Pikes Peak Nugget from 1900-1941, was issued until 2006-2007. The 1969-1970 Nugget was issued as loose photosheets contained in a box and named the The Colorado College Nugget, formerly the Pikes Peak Nugget from 1900-1941, was issued until 2006-2007. The 1969-1970 Nugget was issued as loose photosheets contained in a box and named the',
   * 'owner' => 'fedoraAdmin',
   * 'created' => '2011-06-17T15:15:57.214Z',
   * 'modified' => '2011-07-15T19:08:16.008Z',
   * 'tn' => '/' . $module_path . '/images/collection.png',
   */
}

/**
 * Generate JSON to pass to EXT.js tree panel based on PID.
 *
 * @param string $pid
 *   The PID of the Fedora Object
 */
function content_model_viewer_treemembers($pid) {
  module_load_include('inc', 'content_model_viewer', 'Tree');
  $node = isset($_GET['node']) ? $_GET['node'] : NULL;
  $tree = new Tree($pid, $node);
  echo $tree->getTree();
  // fields: ['id','text', 'link','pid','leaf','children'],
  /* echo  json_encode(array('data' => array('pid' => 'si:root', 'text' => 'si:root (1)', 'expanded' => true,  'children' => array( */
  /*       array('pid' => 'si:org', 'text' => 'si:organizations (2)'), */
  /*       array('pid' => 'si:people', 'text' => 'si:people (2)'), */
  /*     ) */
  /*     )) */
  /* ); */
  exit();
}

function content_model_viewer_treemember($pid) {
  module_load_include('inc', 'content_model_viewer', 'Collection');
  module_load_include('inc', 'content_model_viewer', 'Tree');
  $tree = new Tree($pid, $pid . '|||00000');
  $nodeInfo =  $tree->getTree();
  $nodeInfo = json_decode($nodeInfo);
  $collection = new Collection($pid);
  list($label, $count) = $collection->getChildCount($pid);
  $count = $count > 0 ? ' (' . $count . ')' : '';
  $nodeInfo->parents = array('label' => $label . $count);

  echo  json_encode($nodeInfo);
  exit();
}

/**
 * Get/Set data stream properties for the given Fedora Object.
 *
 * @param string $pid
 *   The PID of the Fedora Object, whose data streams this function will get/set.s
 */
function content_model_viewer_datastreams($pid, $dsid = NULL) {
  module_load_include('inc', 'content_model_viewer', 'DatastreamProperties');
  switch ($_SERVER['REQUEST_METHOD']) {
    case 'GET':
      $filter = isset($_GET['filter']) ? $_GET['filter'] : FALSE;
      $datastreams = new DatastreamProperties($pid);
      list($data, $total) = $datastreams->get($_GET['start'], $_GET['limit'], $filter);
      echo json_encode(array('success' => TRUE, 'data' => $data, 'total' => $total));
      exit();
    case 'PUT':
      if ($_SERVER['CONTENT_LENGTH'] > 0) {
        $stdin = fopen("php://input", "r");
        $json = fread($stdin, $_SERVER['CONTENT_LENGTH']);
        $data = json_decode($json);
        $datastreams = new DatastreamProperties($pid);
        $data = $datastreams->setProperties($dsid, $data);
        echo json_encode(array('success' => TRUE, 'msg' => "Successfully modified $dsid's properties", 'data' => $data));
        exit();
      }
      break;
  }
}

/**
 * Gets/sets the properties of the object identified by $pid.
 *
 * @param string $pid
 *
 * @return string
 */
function content_model_viewer_properties($pid) {
  module_load_include('inc', 'content_model_viewer', 'ObjectProperties');
  switch ($_SERVER['REQUEST_METHOD']) {
    case 'GET':
      $object_properties = new ObjectProperties($pid);
      $properties = $object_properties->getProperties();
      echo json_encode(array('success' => TRUE, 'data' => array($properties)));
      exit();
    case 'POST':
      $label = $_POST['label'];
      $owner = $_POST['owner'];
      $object_properties = new ObjectProperties($pid);
      $success = $object_properties->setProperties($label, $owner);
      $message = $success ? t('Successfuly modified object properties') : t('Failed to modify object properties');
      $properties = $object_properties->getProperties();
      echo json_encode(array('success' => TRUE, 'msg' => $message, 'data' => $properties));
      exit();
  }
}

/**
 * Purges the object identified by $pid.
 *
 * The user will be redirected to the sites home page.
 *
 * @param string $pid
 *
 * @return string
 */
function content_model_viewer_purge_object($pid) {
  module_load_include('inc', 'sidora', 'includes/utils');
  module_load_include('inc', 'fedora_repository', 'api/fedora_item');
  module_load_include('inc', 'content_model_viewer', 'ObjectProperties');
  $active_states = array('A', 'I');
  $properties = new ObjectProperties($pid);
  $state = $properties->state;
  $success = FALSE;

  if (array_search($state, $active_states) !== FALSE) {
    $parents = sidora_get_parents($pid);
    $parent_count = count($parents);

    $repo = tuque_wrapper_get_repository_instance();


    // @todo Remove THIS SHIT!!!!!!!! Replace with tuque stuff.o
    try {
      $description = $repo->api->a->describeRepository();
      $object = $repo->getObject($pid);
      $children_concepts = $object->relationships->get(RELS_EXT_URI, 'hasConcept');
      $children_resources = $object->relationships->get(RELS_EXT_URI, 'hasResource');
      $child_count = count($children_concepts) + count($children_resources);

      if ($parent_count == 1 && $child_count == 0) { // All child concepts/resource belong to other concepts
        $is_resource = in_array('si:resourceCModel', $object->models);

        $predicate = 'hasConcept';
        if ($is_resource) {
          $predicate = 'hasResource';
        }
        sidora_update_relationship(RELS_EXT_URI, $predicate, key($parents), $pid, TRUE);
        $success = $properties->setState('D');
        $message = $success ? t('Successfuly deleted object') : t('Failed to delete object');
      }
      else {
        $message = t('Failed to delete object. You cannot delete an object that is the sole parent of one or more Concepts/Resources.');
      }

    } catch(Exception $e) {
      $code = $e->getCode();
      switch ($code) {
        case '404':
          if (!isset($description)) { // Couldn't reach the repository.
            drupal_set_message(t('The Fedora repository server is currently unavailable. Please contact the site administrator.'), 'error', FALSE);
          }
          drupal_not_found();
          break;
        case '401':
        case '403':
          drupal_access_denied();
          break;
        default:
          drupal_set_message(t('An error occured when attempting to access the fedora repository. Please contact the site administrator.'), 'error', FALSE);
          $message = '%type: !message in %function (line %line of %file).';
          $backtrace = $e->getTrace();
          $caller = $backtrace[1];
          $variables = array(
            '%type' => get_class($e),
            '!message' => check_plain($e->getMessage()),
            '%function' => $caller['function'],
            '%file' => $caller['file'],
            '%line' => $caller['line']
          );
          watchdog('islandora', $message, $variables, WATCHDOG_ERROR, NULL);
          drupal_not_found();
          break;
      }
      exit();
    }

  }
  else {
    $message = t('Object does not exist or is in a in-active state.');
  }

  echo json_encode(array('success' => $success, 'msg' => $message, 'pid' => $pid));
  exit();

}

function content_model_viewer_add_object($pid, $type = 'concept') { // Ugly hacks!
  $cmodels = content_model_viewer_get_cmodels($pid);
  $id = $type == 'concept' ? 'add-concept-form' : 'add-resource-form';
  $action = $type == 'concept' ? 'ingest-concept' : 'ingest-resource';
  $data = theme('content_model_viewer_metadata_form', $id, $pid, $action);
  $javascript = drupal_add_js(NULL, NULL, 'header');
  $settings = $javascript['setting'];
  if (isset($settings)) {
    $settings = call_user_func_array('array_merge_recursive', $javascript['setting']);
    unset($settings['ahah']['']);
  }
  $js = $javascript['module'];
  $query_string = '?'. substr(variable_get('css_js_query_string', '0'), 0, 1);
  $files = array();
  foreach ($js as $path => $properties) {
    $files[] = base_path() . $path . ($properties['cache'] ? $query_string : '?'. time());
  }
  $css_files = array();
  $css = content_model_viewer_grab_css();
  foreach ($css['all'] as $group) {
    foreach ($group as $path => $bool) {
      $css_files[] = base_path() . $path . $query_string;
    }
  }
  header("Content-type: application/json");
  echo json_encode(array('success' => TRUE, 'data' => $data, 'func' => NULL, 'settings' => $settings, 'js' => $files, 'css' => $css_files, 'refresh' => $refresh));
  exit();
}


/**
 *
 */
function content_model_viewer_remove_from_collection($pid, $value) {
  module_load_include('inc', 'fedora_repository', 'CollectionClass');
  module_load_include('inc', 'fedora_repository', 'api/fedora_item');
  module_load_include('inc', 'sidora', 'includes/utils');
  $repo = tuque_wrapper_get_repository_instance();

  try {
    $description = $repo->api->a->describeRepository(); // Check for repository access
    $child = $repo->getObject($pid); // Check for object access
    $is_resource = in_array('si:resourceCModel', $child->models);

    $predicate = 'hasConcept';
    $recipient = $value;
    $related = $pid;
    if ($is_resource) {
      $predicate = 'hasResource';
    }
    sidora_update_relationship(RELS_EXT_URI, $predicate, $recipient, $related, TRUE);

  } catch(Exception $e) {
    $code = $e->getCode();
    switch ($code) {
      case '404':
        if (!isset($description)) { // Couldn't reach the repository.
          drupal_set_message(t('The Fedora repository server is currently unavailable. Please contact the site administrator.'), 'error', FALSE);
        }
        drupal_not_found();
        break;
      case '401':
      case '403':
        drupal_access_denied();
        break;
      default:
        drupal_set_message(t('An error occured when attempting to access the fedora repository. Please contact the site administrator.'), 'error', FALSE);
        $message = '%type: !message in %function (line %line of %file).';
        $backtrace = $e->getTrace();
        $caller = $backtrace[1];
        $variables = array(
          '%type' => get_class($e),
          '!message' => check_plain($e->getMessage()),
          '%function' => $caller['function'],
          '%file' => $caller['file'],
          '%line' => $caller['line']
        );
        watchdog('islandora', $message, $variables, WATCHDOG_ERROR, NULL);
        drupal_not_found();
        break;
    }
    exit();
  }

  echo json_encode(array('success' => TRUE, 'msg' => t('Removed Relationship')));
  exit();
}
/**
 * Adds a datastream to the object identified by $pid.*
 *
 * @param string $pid
 *
 * @return string
 */
function content_model_viewer_add_datastream($pid) {
  $values = $_POST;
  $dsid = $_POST['dsid'];
  $label = $_POST['label'];
  $control = $_POST['control']; // Manage
  $file = array_shift($_FILES);
  module_load_include('inc', 'fedora_repository', 'api/fedora_item');
  $success = false;
  if ($file['error'] == UPLOAD_ERR_OK) {
    try {
      $item = new Fedora_Item($pid);
      if (empty($item->datastreams[$dsid])) {
        module_load_include('inc', 'fedora_repository', 'MimeClass');
        $mimetype_helper = new MimeClass();
        $mime = $mimetype_helper->getType($file['name']);
        $success = $item->add_datastream_from_file($file['tmp_name'], $dsid, $label, $mime, $control);
      }
    } catch (Exception $e) {
      // log some error...
    }
  }
  $message = $success ? t('Successfully added datastream.') : t('Failed to add datastream.');
  echo json_encode(array('success' => $success, 'msg' => $message));
  exit();
}

/**
 * Purges the given datastream ($dsid) from the object identified by $pid.
 *
 * @param string $pid
 * @param string $dsid
 *
 * @return string
 */
function content_model_viewer_purge_datastream($pid, $dsid) {
  module_load_include('inc', 'fedora_repository', 'api/fedora_item');
  $item = new Fedora_Item($pid);
  $success = $item->purge_datastream($dsid);
  $message = $success ? t('Successfully purged datastream.') : t('Failed to purge datastream.');
  echo json_encode(array('success' => $success, 'msg' => $message));
  exit();
}

/**
 * Downloads the given datastream ($dsid) from the object identified by $pid.
 *
 * @param string $pid
 * @param string $dsid
 *
 * @return string
 */
function content_model_viewer_download_datastream($pid, $dsid) {
  module_load_include('inc', 'content_model_viewer', 'Download');
  download_datastream($pid, $dsid);
}

/**
 * Renders the viewer for the given datastream ($dsid) from the object identified by $pid.
 *
 * @param string $pid
 * @param string $dsid
 *
 * @return string
 */
function content_model_viewer_view_datastream($pid, $dsid) {
  module_load_include('inc', 'fedora_repository', 'api/fedora_item');
  $item = new Fedora_Item($pid);
  if (isset($item->datastreams[$dsid])) {
    $mime = $item->datastreams[$dsid]['MIMEType'];
    $properties = content_model_viewer_get_viewer_properties($mime);
    if ($properties) {
      module_load_include($properties['type'], $properties['module'], $properties['file']);
      $class = $properties['class'];
      $viewer = new $class();
      echo $viewer->render($pid, $dsid);
      exit();
    }
  }
  echo '<div>' . t('No Viewer Avaliable') . '</div>';
  exit();
}

/**
 * Checks if an object has members.
 *
 * @param string $pid
 *
 * @return boolean
 */
function content_model_viewer_object_has_members($pid) {
  module_load_include('inc', 'fedora_repository', 'CollectionClass');
  $collection = new CollectionClass();
  $results = $collection->getRelatedItems($pid);
  $results = trim($results);
  if ($results != '') {
    $document = new DOMDocument();
    $document->loadXML($results);
    $path = new DOMXPath($document);
    $path->registerNamespace('sparql', 'http://www.w3.org/2001/sw/DataAccess/rf1/result');
    $results = $path->query('//sparql:result');
    $count = $results->length;
    return $count > 0;
  }
  return FALSE;
}

/**
 *
 * @param <type> $pid
 * for this to work an objects cmodel must have a cmodel of islandora:collectionCModel
 */
function content_model_viewer_is_object_collection($pid) {
  $itql_query = 'select $object $title $content from <#ri>
                             where ($object <info:fedora/fedora-system:def/model#label> $title
                             and $object <fedora-model:hasModel> $content
                             and ($content <fedora-model:hasModel> <info:fedora/islandora:collectionCModel>)
                             and $object <fedora-model:state> <info:fedora/fedora-system:def/model#Active>)
                             order by $title';
  module_load_include('inc', 'fedora_repository', 'CollectionClass');
  $collection = new CollectionClass();
  $results = $collection->getRelatedItems(NULL, $itql_query);
  $xml = simplexml_load_string($results);
  if (!$xml) {
    drupal_set_message(t('Error getting list of collection objects'), 'error');
    return;
  }
  foreach ($xml->results->result as $result) {
    $a = $result->object->attributes();
    $temp = $a['uri'];
    $object = substr($temp, strrpos($temp, '/') + 1);
    if ($pid === $object) {
      return true;
    }
  }
  return FALSE;
}

/**
 * Checks to see if the content model of the given object is a collection.
 *
 * Checks for the presence of a COLLECTION_POLICY datastream.
 *
 * @param string $pid
 *   The object pid.
 *
 * @return bool
 *   Return TRUE if the object has a collection model.
 */
function content_model_viewer_object_has_collection_model($pid) {
  module_load_include('inc', 'fedora_repository', 'ContentModel');
  module_load_include('inc', 'fedora_repository', 'api/fedora_item');
  $item = new Fedora_Item($pid);
  if ($item->exists()) {
    if (isset($item->datastreams['COLLECTION_POLICY'])) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 *
 * @param type $pid
 */
function content_model_viewer_edit_metadata_form(array &$form_state, $pid) {
  module_load_include('inc', 'islandora_content_model_forms', 'EditObjectMetadataForm');
  module_load_include('inc', 'fedora_repository', 'ConnectionHelper');
  $connection_helper = new ConnectionHelper();
  $client = $connection_helper->getSoapClient(variable_get('fedora_soap_url', 'http://localhost:8080/fedora/services/access?wsdl'));
  try {
    $edit_form = new EditObjectMetadataForm();
    $output = $edit_form->create($pid, $client, $form_state);
    $output['which_action'] = array(
      '#type' => 'hidden',
      '#value' => 'edit'
    );
    return $output;
  } catch (Exception $e) {
    $msg = "File: {$e->getFile()}<br/>Line: {$e->getLine()}<br/>Error: {$e->getMessage()}";
    drupal_set_message($msg, 'error');
    return array();
  }
}

/**
 * Validate Edit Form.
 *
 * @param array $form
 * @param array $form_state
 */
function content_model_viewer_edit_metadata_form_validate(array &$form, array &$form_state) {
  if ($form_state['storage']['step'] == 1) {
    $form_state['storage']['step']++;
    $form_state['rebuild'] = TRUE;
  }
  else {
    module_load_include('inc', 'xml_form_api', 'XMLForm');
    $xml_form = new XMLForm($form_state);
    $xml_form->validate($form, $form_state);
  }
}

/**
 * Submit Edit Form.
 *
 * @param array $form
 * @param array $form_state
 */
function content_model_viewer_edit_metadata_form_submit(array &$form, array &$form_state) {
  module_load_include('inc', 'islandora_content_model_forms', 'EditObjectMetadataForm');
  try {
    $edit_form = new EditObjectMetadataForm();
    $edit_form->submit($form, $form_state);
  } catch (Exception $e) {
    $msg = "File: {$e->getFile()}<br/>Line: {$e->getLine()}<br/>Error: {$e->getMessage()}";
    drupal_set_message($msg, 'error');
  }
  $form_state['redirect'] = "viewer/{$form_state['values']['pid']}/overview";
  $_SESSION['content_model_viewer_refresh_tree'] = $form_state['values']['pid']; // Yucky hac
  unset($_SESSION['messages']); // Don't display drupal messages to the user for this interface.
}

function content_model_viewer_ingest_concept_metadata_form(array &$form_state, $collection_pid) {
  return fedora_repository_ingest_form($form_state, $collection_pid);
}

function content_model_viewer_ingest_concept_metadata_form_validate(array &$form, array &$form_state) {
  fedora_repository_ingest_form_validate($form, $form_state);
}

function content_model_viewer_ingest_concept_metadata_form_submit(array &$form, array &$form_state) {
  $_SESSION['content_model_viewer_refresh_tree'] = $form_state['values']['pid']; // Yucky hack
  $form_state['redirect'] = "viewer/{$form_state['values']['pid']}/overview";
  unset($_SESSION['messages']); // Don't display drupal messages to the user for this interface.
  // Ingestion is handled by sidora hook urg...
}

function content_model_viewer_ingest_resource_metadata_form(array &$form_state, $collection_pid) {
  return content_model_viewer_ingest_metadata_form($form_state, $collection_pid);
}

function content_model_viewer_ingest_resource_metadata_form_validate(array &$form, array &$form_state) {
  //  content_model_viewer_ingest_metadata_form_validate($form, $form_state);
  fedora_repository_ingest_form_validate($form, $form_state);
}

function content_model_viewer_ingest_resource_metadata_form_submit(array &$form, array &$form_state) {
  $_SESSION['content_model_viewer_refresh_tree'] = $form_state['values']['pid']; // Yucky hack
  $form_state['redirect'] = "viewer/{$form_state['values']['pid']}/overview";
  unset($_SESSION['messages']); // Don't display drupal messages to the user for this interface.
  // Ingestion is handled by the sidora hook... urg..
}

function content_model_viewer_ingest_metadata_form(array &$form_state, $collection_pid) {
  if (!user_access('ingest new fedora objects')) {
    drupal_set_message(t('You do not have permission to ingest.'), 'error');
    return FALSE;
  }
  module_load_include('inc', 'fedora_repository', 'SecurityClass');
  $security_class = new SecurityClass();
  if (!$security_class->canIngestHere($collection_pid)) {
    // Queries the collection object for a child security datastream and if found parses it
    // to determine if this user is allowed to ingest in this collection
    // we assume if they are able to modify objects in the collection they can ingest as well.
    drupal_set_message(t('You do not have premission to ingest here.'));
    return FALSE;
  }
  if ($collection_pid == NULL) {
    drupal_set_message(t('You must specify an collection object pid to ingest an object.'), 'error');
    return FALSE;
  }
  module_load_include('inc', 'islandora_content_model_forms', 'IngestObjectMetadataForm');
  try {
    $ingest_form = new IngestObjectMetadataForm();
    $output = $ingest_form->create($collection_pid, NULL, $form_state);
    $output['which_action'] = array(
      '#type' => 'hidden',
      '#value' => 'ingest'
    );
    return $output;
  } catch (Exception $e) {
    $msg = "File: {$e->getFile()}<br/>Line: {$e->getLine()}<br/>Error: {$e->getMessage()}";
    drupal_set_message($msg, 'error');
    return array();
  }
}

/**
 * Validate Ingest Form.
 *
 * @param array $form
 * @param array $form_state
 */
function content_model_viewer_ingest_metadata_form_validate(array &$form, array &$form_state) {
  if ($form_state['storage']['step'] == 1) {
    $form_state['storage']['step']++;
    $form_state['rebuild'] = TRUE;
  }
  else {
    if (!empty($_FILES['files']['name']['ingest-file-location'])) {
      $file = file_save_upload('ingest-file-location');
      file_move($file->filepath, 0, 'FILE_EXISTS_RENAME');
      $form_state['values']['ingest-file-location'] = $file->filepath;
    }
    if (isset($form_state['values']['ingest-file-location']) && file_exists($form_state['values']['ingest-file-location'])) {
      module_load_include('inc', 'fedora_repository', 'ContentModel');
      module_load_include('inc', 'fedora_repository', 'MimeClass');
      $file = $form_state['values']['ingest-file-location'];
      $content_model_pid = ContentModel::getPidFromIdentifier($form_state['values']['models']);
      $content_model_pid;
      $content_model_dsid = ContentModel::getDSIDFromIdentifier($form_state['values']['models']);
      if (($content_model = ContentModel::loadFromModel($content_model_pid, $content_model_dsid)) !== FALSE) {
        $allowed_mime_types = $content_model->getMimetypes();
        $mimetype = new MimeClass();
        $format = $mimetype->getType($file);
        if (!empty($file)) {
          if (!in_array($format, $allowed_mime_types)) {
            form_set_error('ingest-file-location', t('The uploaded file\'s mimetype (' . $format . ') is not associated with this Content Model. The allowed types are ' .
                implode(' ', $allowed_mime_types)));
            file_delete($file);
            return;
          }
          elseif (!$content_model->execIngestRules($file, $format)) {
            drupal_set_message(t('Error following Content Model Rules'), 'error');
            foreach (ContentModel::$errors as $error) {
              drupal_set_message($error, 'error');
            }
          }
        }
      }
    }
    module_load_include('inc', 'xml_form_api', 'XMLForm');
    $xml_form = new XMLForm($form_state);
    $xml_form->validate($form, $form_state);
  }
}

/**
 * Submit Ingest Form.
 *
 * @param array $form
 * @param array $form_state
 */
function content_model_viewer_ingest_metadata_form_submit(array &$form, array &$form_state) {
  module_load_include('inc', 'islandora_content_model_forms', 'IngestObjectMetadataForm');
  if ($form_state['storage']['step'] == 2) {
    $ingest_form = new IngestObjectMetadataForm();
    $ingest_form->submit($form, $form_state);

    //TODO we need to remove the default ismemberofcollection relationship and go to a new format of hasConcept or hasResource. This needs to change HACK HACK
    $parent_pid = $form_state['values']['collection_pid'];
    $child_pid = $form_state['values']['pid'];
    $repo = tuque_wrapper_get_repository_instance();
    $parent = $repo->getObject($parent_pid);
    $child = $repo->getObject($child_pid);
    //remove ismember if collection from child
    $child->relationships->remove(RELS_EXT_URI, 'isMemberOfCollection', $parent_pid);

    $is_imageCModel = in_array('si:imageCModel', $child->models);
    $is_fieldbookCModel = in_array('si:fieldbookCModel', $child->models);
    $is_datasetCModel = in_array('si:datasetCModel', $child->models);

    $predicate = 'hasConcept';
    $model = 'si:conceptCModel';
    if ($is_imageCModel || $is_fieldbookCModel || $is_datasetCModel) {
      $predicate = 'hasResource';
      $model = 'si:resourceCModel';
    }
    $parent->relationships->add(RELS_EXT_URI, $predicate, $child_pid);

    $child->relationships->add(FEDORA_MODEL_URI, 'hasModel', $model);

    $_SESSION['content_model_viewer_refresh_tree'] = $form_state['values']['pid']; // Yucky hack
  }
  $form_state['redirect'] = "viewer/{$form_state['values']['pid']}/overview";
  unset($_SESSION['messages']); // Don't display drupal messages to the user for this interface.
}
